 
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Data.Entity;
using System.Configuration;
using yalms.Models;

namespace yalms.DAL
{

   /// <summary>
   /// ---------------------------------------------------------------------------------------------------
   /// File Autogenerated at 2016-03-16 23:23:37
   /// Object derived from the  Couser_Student table in the LMSProject database.
   /// Solution version: 1.0.0.1
   /// [ ] Check box with 'x' to prevent entire file from being overwritten. 
   /// Do not move, remove or change the DMZ region markers. Code inside the DMZ will not be overwritten by auto generation.
   /// ---------------------------------------------------------------------------------------------------
   /// </summary>
    public class Couser_StudentRepository: ICouser_StudentRepository
    {
        // Get context for specific connectionstring.
        private EFContext context = new EFContext(ConfigurationManager.ConnectionStrings["EFContext"].ConnectionString);


        #region Get all Couser_Students
        public IEnumerable<Couser_Student> GetAllCouser_Students()
        {
            return context.Couser_Students;
        }

        #endregion

        #region Get Couser_Student by its Couser_Student ID without populating foregin key data
        public Couser_Student GetCouser_Student_SimpleByID(int? couser_StudentID)
        {
            // Get single Couser_Student by its unique ID
            return context.Couser_Students.SingleOrDefault(o => o.Couser_StudentID == couser_StudentID);

        }
        #endregion

        #region Get Couser_Student by its Couser_Student ID
        public Couser_Student GetCouser_StudentByID(int? couser_StudentID)
        {
            // Get single Couser_Student by its unique ID
            var couser_Student = context.Couser_Students.SingleOrDefault(o => o.Couser_StudentID == couser_StudentID);


            return couser_Student;
        }
        #endregion

        #region Get newest Couser_Student.
        public Couser_Student GetNewestCouser_Student()
        {
           return context.Couser_Students.OrderByDescending(u => u.Couser_StudentID).FirstOrDefault();
        }
        #endregion

        #region Insert new Couser_Student object and register what user created it and when.
        public void InsertCouser_Student(Couser_Student couser_Student, int userID)
        {
            // Add Couser_Student to context
            context.Couser_Students.Add(couser_Student);

            // Save context changes.
            Save();
            Dispose();
        }
        #endregion

        #region Delete Couser_Student  from database by Couser_Student ID - Do not use unless sure it will not create data inconsistency and only if user is super Admin.
        public void DeleteCouser_Student (int couser_StudentID)
        {
            // Get Couser_Student by ID.
            Couser_Student couser_Student = context.Couser_Students.SingleOrDefault(o => o.Couser_StudentID == couser_StudentID);
            context.Couser_Students.Remove(couser_Student);
        }
        #endregion



        #region Update existing Couser_Student object and register what user modified it and when.
        public void UpdateCouser_Student (Couser_Student newCouser_Student,int userID)
        {
            // Get existing Couser_Student object by ID for update.
            var oldCouser_Student = context.Couser_Students.SingleOrDefault(o => o.Couser_StudentID == newCouser_Student.Couser_StudentID);


            // Save context changes.
            Save();
            Dispose();
        }
        #endregion




        #region System functions.
        public void Save()
        {
            context.SaveChanges();
        }

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
        }

        #endregion


    }
}

