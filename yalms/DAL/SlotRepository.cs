 
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Data.Entity;
using System.Configuration;
using yalms.Models; 

namespace yalms.DAL
{

   /// <summary>
   /// ---------------------------------------------------------------------------------------------------
   /// File Autogenerated at 2016-03-16 23:23:38
   /// Object derived from the  Slot table in the LMSProject database.
   /// Solution version: 1.0.0.1
   /// [ ] Check box with 'x' to prevent entire file from being overwritten. 
   /// Do not move, remove or change the DMZ region markers. Code inside the DMZ will not be overwritten by auto generation.
   /// ---------------------------------------------------------------------------------------------------
   /// </summary>
    public class SlotRepository: ISlotRepository
    {
        // Get context for specific connectionstring.
        private EFContext context = new EFContext(ConfigurationManager.ConnectionStrings["EFContext"].ConnectionString);


        #region Get all Slots even those tagged as removed and not yet created.
        public IEnumerable<Slot> GetAllSlots()
        {
            return context.Slots;
        }

        #endregion

        #region Get Slot by its Slot ID without populating foregin key data
        public Slot GetSlot_SimpleByID(int? slotID)
        {
            // Get single Slot by its unique ID
            return context.Slots.SingleOrDefault(o => o.SlotID == slotID);

        }
        #endregion

        #region Get Slot by its Slot ID
        public Slot GetSlotByID(int? slotID)
        {
            // Get single Slot by its unique ID
            var slot = context.Slots.SingleOrDefault(o => o.SlotID == slotID);


            return slot;
        }
        #endregion

        #region Get newest Slot.
        public Slot GetNewestSlot()
        {
           return context.Slots.OrderByDescending(u => u.SlotID).FirstOrDefault();
        }
        #endregion

        #region Insert new Slot object and register what user created it and when.
        public void InsertSlot(Slot slot, int userID)
        {

            // Add Slot to context
            context.Slots.Add(slot);

            // Save context changes.
            Save();
            Dispose();
        }
        #endregion

        #region Delete Slot  from database by Slot ID - Do not use unless sure it will not create data inconsistency and only if user is super Admin.
        public void DeleteSlot (int slotID)
        {
            // Get Slot by ID.
            Slot slot = context.Slots.SingleOrDefault(o => o.SlotID == slotID);
            context.Slots.Remove(slot);
        }
        #endregion



        #region Update existing Slot object and register what user modified it and when.
        public void UpdateSlot (Slot newSlot,int userID)
        {
            // Get existing Slot object by ID for update.
            var oldSlot = context.Slots.SingleOrDefault(o => o.SlotID == newSlot.SlotID);
            oldSlot.SlotNR = newSlot.SlotNR;
            oldSlot.WeekDay = newSlot.WeekDay;
            oldSlot.WeekNR = newSlot.WeekNR;



            // Save context changes.
            Save();
            Dispose();
        }
        #endregion

        #region Update Slot with foreignkey names for presentation.
        private Slot PopulateSlotWithForeignKeyDataObjects(Slot slot)
        {
            // Get objects for Sub keys
            slot.CourseID_Course = new CourseRepository().GetCourse_SimpleByID(slot.CourseID);
            slot.RoomID_Room = new RoomRepository().GetRoom_SimpleByID(slot.RoomID);
            return slot;
        }
        #endregion



        #region System functions.
        public void Save()
        {
            context.SaveChanges();
        }

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
        }

        #endregion


    }
}

