 
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Data.Entity;
using System.Configuration;
using yalms.Models; 

namespace yalms.DAL
{

   /// <summary>
   /// ---------------------------------------------------------------------------------------------------
   /// File Autogenerated at 2016-03-16 23:23:37
   /// Object derived from the  Schedule table in the LMSProject database.
   /// Solution version: 1.0.0.1
   /// [ ] Check box with 'x' to prevent entire file from being overwritten. 
   /// Do not move, remove or change the DMZ region markers. Code inside the DMZ will not be overwritten by auto generation.
   /// ---------------------------------------------------------------------------------------------------
   /// </summary>
    public class ScheduleRepository: IScheduleRepository
    {
        // Get context for specific connectionstring.
        private EFContext context = new EFContext();


        #region Get all Schedules even those tagged as removed and not yet created.
        public IEnumerable<Schedule> GetAllSchedules()
        {
            return context.Schedules;
        }

        #endregion

        #region Get Schedule by its Schedule ID without populating foregin key data
        public Schedule GetSchedule_SimpleByID(int? scheduleID)
        {
            // Get single Schedule by its unique ID
            return context.Schedules.SingleOrDefault(o => o.ScheduleID == scheduleID);

        }
        #endregion

        #region Get Schedule by its Schedule ID
        public Schedule GetScheduleByID(int? scheduleID)
        {
            // Get single Schedule by its unique ID
            var schedule = context.Schedules.SingleOrDefault(o => o.ScheduleID == scheduleID);



            return schedule;
        }
        #endregion

        #region Get newest Schedule.
        public Schedule GetNewestSchedule()
        {
           return context.Schedules.OrderByDescending(u => u.ScheduleID).FirstOrDefault();
        }
        #endregion

        #region Insert new Schedule object and register what user created it and when.
        public void InsertSchedule(Schedule schedule, int userID)
        {


            // Add Schedule to context
            context.Schedules.Add(schedule);

            // Save context changes.
            Save();
            Dispose();
        }
        #endregion

        #region Delete Schedule  from database by Schedule ID - Do not use unless sure it will not create data inconsistency and only if user is super Admin.
        public void DeleteSchedule (int scheduleID)
        {
            // Get Schedule by ID.
            Schedule schedule = context.Schedules.SingleOrDefault(o => o.ScheduleID == scheduleID);
            context.Schedules.Remove(schedule);
        }
        #endregion

        #region Tag Schedule as removed, and register what user removed it and when.
        public void RemoveSchedule(Schedule newSchedule, int userID)
        {
            // Get Schedule for update
            var oldSchedule = context.Schedules.Single(o => o.ScheduleID == newSchedule.ScheduleID);


            // Save context changes.
            Save();
            Dispose();
        }
        #endregion

        #region Update existing Schedule object and register what user modified it and when.
        public void UpdateSchedule (Schedule newSchedule,int userID)
        {
            // Get existing Schedule object by ID for update.
            var oldSchedule = context.Schedules.SingleOrDefault(o => o.ScheduleID == newSchedule.ScheduleID);
            oldSchedule.AssignmentFolder = newSchedule.AssignmentFolder;



            // Save context changes.
            Save();
            Dispose();
        }
        #endregion

        #region Update Schedule with foreignkey names for presentation.
        private Schedule PopulateScheduleWithForeignKeyDataObjects(Schedule schedule)
        {
            // Get objects for Sub keys
            return schedule;
        }
        #endregion



        #region System functions.
        public void Save()
        {
            context.SaveChanges();
        }

        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

        public void Dispose()
        {
            Dispose(true);
        }

        #endregion


    }
}

